/*
 * \copyright Copyright 2013 Google Inc. All Rights Reserved.
 * \copyright Copyright 2015 All Rights Reserved.
 * \license @{
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @}
 */

//
// These are a little ugly.
// The C++ style guide requires 80-column lines.
// cpplint.py requires 2-space indentation.

#include "quantsystem/common/strings/ascii_ctype.h"

namespace quantsystem {

// # Table generated by this Python code (bit 0x02 is currently unused):
// def Hex2(n):
//   return '0x' + hex(n/16)[2:] + hex(n%16)[2:]
// def IsPunct(ch):
//   return (ord(ch) >= 32 and ord(ch) < 127 and
//           not ch.isspace() and not ch.isalnum())
// def IsBlank(ch):
//   return ch in ' \t'
// def IsCntrl(ch):
//   return ord(ch) < 32 or ord(ch) == 127
// def IsXDigit(ch):
//   return ch.isdigit() or ch.lower() in 'abcdef'
// for i in range(128):
//   ch = chr(i)
//   mask = ((ch.isalpha() and 0x01 or 0) |
//           (ch.isalnum() and 0x04 or 0) |
//           (ch.isspace() and 0x08 or 0) |
//           (IsPunct(ch) and 0x10 or 0) |
//           (IsBlank(ch) and 0x20 or 0) |
//           (IsCntrl(ch) and 0x40 or 0) |
//           (IsXDigit(ch) and 0x80 or 0))
//   print Hex2(mask) + ',',
//   if i % 16 == 7:
//     print ' //', Hex2(i & 0x78)
//   elif i % 16 == 15:
//     print
const unsigned char kAsciiPropertyBits[256] = {
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  // 0x00
  0x40, 0x68, 0x48, 0x48, 0x48, 0x48, 0x40, 0x40,
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,  // 0x10
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
  0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  // 0x20
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,  // 0x30
  0x84, 0x84, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x05,  // 0x40
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,  // 0x50
  0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x05,  // 0x60
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,  // 0x70
  0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x40,
};

const char kAsciiToLower[256] = {
  (char)00,  (char) 1,  (char) 2,  (char) 3,  (char) 4,  (char) 5,  (char) 6,  (char) 7,  (char) 8,  (char) 9,
  (char)10,  (char)11,  (char)12,  (char)13,  (char)14,  (char)15,  (char)16,  (char)17,  (char)18,  (char)19,
  (char)20,  (char)21,  (char)22,  (char)23,  (char)24,  (char)25,  (char)26,  (char)27,  (char)28,  (char)29,
  (char)30,  (char)31,  (char)32,  (char)33,  (char)34,  (char)35,  (char)36,  (char)37,  (char)38,  (char)39,
  (char)40,  (char)41,  (char)42,  (char)43,  (char)44,  (char)45,  (char)46,  (char)47,  (char)48,  (char)49,
  (char)50,  (char)51,  (char)52,  (char)53,  (char)54,  (char)55,  (char)56,  (char)57,  (char)58,  (char)59,
  (char)60,  (char)61,  (char)62,  (char)63,  (char)64,  'a', 'b', 'c', 'd', 'e',
  'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
  (char)'z', (char)91,  (char)92,  (char)93,  (char)94,  (char)95,  (char)96,  (char)97,  (char)98,  (char)99,
  (char)100, (char)101, (char)102, (char)103, (char)104, (char)105, (char)106, (char)107, (char)108, (char)109,
  (char)110, (char)111, (char)112, (char)113, (char)114, (char)115, (char)116, (char)117, (char)118, (char)119,
  (char)120, (char)121, (char)122, (char)123, (char)124, (char)125, (char)126, (char)127, (char)128, (char)129,
  (char)130, (char)131, (char)132, (char)133, (char)134, (char)135, (char)136, (char)137, (char)138, (char)139,
  (char)140, (char)141, (char)142, (char)143, (char)144, (char)145, (char)146, (char)147, (char)148, (char)149,
  (char)150, (char)151, (char)152, (char)153, (char)154, (char)155, (char)156, (char)157, (char)158, (char)159,
  (char)160, (char)161, (char)162, (char)163, (char)164, (char)165, (char)166, (char)167, (char)168, (char)169,
  (char)170, (char)171, (char)172, (char)173, (char)174, (char)175, (char)176, (char)177, (char)178, (char)179,
  (char)180, (char)181, (char)182, (char)183, (char)184, (char)185, (char)186, (char)187, (char)188, (char)189,
  (char)190, (char)191, (char)192, (char)193, (char)194, (char)195, (char)196, (char)197, (char)198, (char)199,
  (char)200, (char)201, (char)202, (char)203, (char)204, (char)205, (char)206, (char)207, (char)208, (char)209,
  (char)210, (char)211, (char)212, (char)213, (char)214, (char)215, (char)216, (char)217, (char)218, (char)219,
  (char)220, (char)221, (char)222, (char)223, (char)224, (char)225, (char)226, (char)227, (char)228, (char)229,
  (char)230, (char)231, (char)232, (char)233, (char)234, (char)235, (char)236, (char)237, (char)238, (char)239,
  (char)240, (char)241, (char)242, (char)243, (char)244, (char)245, (char)246, (char)247, (char)248, (char)249,
  (char)250, (char)251, (char)252, (char)253, (char)254, (char)255
};

const char kAsciiToUpper[256] = {
  (char)00,  (char)1,   (char)2,   (char)3,   (char)4,   (char)5,   (char)6,   (char)7,   (char)8,   (char)9,
  (char)10,  (char)11,  (char)12,  (char)13,  (char)14,  (char)15,  (char)16,  (char)17,  (char)81,  (char)19,
  (char)20,  (char)21,  (char)22,  (char)23,  (char)24,  (char)25,  (char)26,  (char)27,  (char)82,  (char)29,
  (char)30,  (char)31,  (char)32,  (char)33,  (char)34,  (char)35,  (char)36,  (char)37,  (char)83,  (char)39,
  (char)40,  (char)41,  (char)42,  (char)43,  (char)44,  (char)45,  (char)46,  (char)47,  (char)84,  (char)49,
  (char)50,  (char)51,  (char)52,  (char)53,  (char)54,  (char)55,  (char)56,  (char)57,  (char)85,  (char)59,
  (char)60,  (char)61,  (char)62,  (char)63,  (char)64,  (char)65,  (char)66,  (char)67,  (char)86,  (char)69,
  (char)70,  (char)71,  (char)72,  (char)73,  (char)74,  (char)75,  (char)76,  (char)77,  (char)87,  (char)79,
  (char)80,  (char)81,  (char)82,  (char)83,  (char)84,  (char)85,  (char)86,  (char)87,  (char)88,  (char)89,
  (char)90,  (char)91,  (char)92,  (char)93,  (char)94,  (char)95,  (char)96,  'A',       'B',       'C',
  'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
  (char)'X', (char)'Y', (char)'Z', (char)123, (char)124, (char)125, (char)126, (char)127, (char)128, (char)129,
  (char)130, (char)131, (char)132, (char)133, (char)134, (char)135, (char)136, (char)137, (char)138, (char)139,
  (char)140, (char)141, (char)142, (char)143, (char)144, (char)145, (char)146, (char)147, (char)148, (char)149,
  (char)150, (char)151, (char)152, (char)153, (char)154, (char)155, (char)156, (char)157, (char)158, (char)159,
  (char)160, (char)161, (char)162, (char)163, (char)164, (char)165, (char)166, (char)167, (char)168, (char)169,
  (char)170, (char)171, (char)172, (char)173, (char)174, (char)175, (char)176, (char)177, (char)178, (char)179,
  (char)180, (char)181, (char)182, (char)183, (char)184, (char)185, (char)186, (char)187, (char)188, (char)189,
  (char)190, (char)191, (char)192, (char)193, (char)194, (char)195, (char)196, (char)197, (char)198, (char)199,
  (char)200, (char)201, (char)202, (char)203, (char)204, (char)205, (char)206, (char)207, (char)208, (char)209,
  (char)210, (char)211, (char)212, (char)213, (char)214, (char)215, (char)216, (char)217, (char)218, (char)219,
  (char)220, (char)221, (char)222, (char)223, (char)224, (char)225, (char)226, (char)227, (char)228, (char)229,
  (char)230, (char)231, (char)232, (char)233, (char)234, (char)235, (char)236, (char)237, (char)238, (char)239,
  (char)240, (char)241, (char)242, (char)243, (char)244, (char)245, (char)246, (char)247, (char)248, (char)249,
  (char)250, (char)251, (char)252, (char)253, (char)254, (char)255
};

} // namespace quantsystem
